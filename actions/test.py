[
    'if(reto == null) {\n            messageText.setText("No hay más retos");\n            showGameOver(true);\n            startOverButton.visibleProperty().set(true);\n            // Si no hay mas retos las partida se ha acabado y se suman al usuario los puntos de la partida',
    "Services.aumentarPuntuacionUsuario(partida.getCurrentPoints());\n            return;\n        }",
    "loadReto(reto);\n        setODSImage();\n    };\n    @FXML\n    private ImageView imagenVIda;\n    @FXML\n    private ImageView imagenSonido;",
    'private void setODSImage(){\n        String rutaOds = odsImages[partida.getCurrentReto().getODS()];\n        //System.out.println("el ods es " + partida.getCurrentReto().getODS() + " y su ruta es " +  rutaOds);\n        Image image = new Image(getClass().getResourceAsStream(rutaOds));',
    "odsImage.setImage(image);\n    }",
    "private void showGameOver(boolean finPartidaSinPerderReto){\n        abandonarBtn.setVisible(false);\n        menuBtn.setVisible(true);\n        MessageController messageController = new MessageController();\n        Usuario user = services.getUsuario();\n            services.updtUsuario(user);",
    'if(finPartidaSinPerderReto){\n            messageController.setTextoMensaje("FELICIDADES, GANASTE!!");\n            messageController.setPuntuacionConseguida(partida.getCurrentPoints());\n            sonido.getPlayerBackgrounds().stop();',
    'sonido.getPlayerBackgrounds().playFinPartidaGanada();\n            services.updatePartidasGanadas();\n        }else{\n            messageController.setTextoMensaje("GAME OVER!!");\n            points.setText("0");\n            consolidatedPoints.setText("0");',
    "sonido.getPlayerBackgrounds().stop();\n            sonido.getPlayerBackgrounds().playFinPartidaPerdida();\n            services.updatePartidasPerdidas();\n        }",
    'loadViewInJuegoPane("messageView.fxml", messageController);\n    }\n\n    private void showTryAgain() {\n        setVidasViewer();\n        if (partida.getCurrentReto().getType().equals(RetoType.MULTIPLE_CHOICE)) {\n            var messageController = new MessageControllerTryAgain();',
    "CuatroRespuestas cuatroRespuestas = (CuatroRespuestas) partida.getCurrentReto();\n            var answer = cuatroRespuestas.getOptions().get(cuatroRespuestas.getCorrectOption());",
    'messageController.setTextoMensaje("VUELVE A INTENTARLO");\n            messageController.setCorrectAnswer(answer);\n            loadViewInJuegoPane("messageViewTryAgain.fxml", messageController);\n        } else {\n            var messageController = new MessageController();',
    'messageController.setTextoMensaje("VUELVE A INTENTARLO");\n            loadViewInJuegoPane("messageView.fxml", messageController);\n        }\n        services.updateRetosFallados();\n    }',
    'private void showConsolidatedAbandonar() {\n        MessageController messageController = new MessageController();\n        messageController.setTextoMensaje("NO ESTÁ MAL!!");\n        messageController.setPuntuacionConsolidada(partida.getConsolidatedPoints());',
    'loadViewInJuegoPane("messageView.fxml", messageController);\n    }\n    private void setCountDown(long delay){\n        timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {',
    "sonido.getPlayerCountdowns().playCountDown();",
    "}\n        }, delay);\n    }\n\n    // Function that is ran in every reto when the user makes the final decision for",
]
